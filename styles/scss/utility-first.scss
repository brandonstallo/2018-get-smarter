$spaceamounts: (
  0: 0,
  1: 4,
  2: 8,
  3: 12,
  4: 16,
  5: 20,
  6: 24,
  7: 32,
  8: 40,
  9: 48,
  10: 60
);

$sides: (top, right, bottom, left, all); // Leave this variable alone

$color-list: (
  red:   #f00,
  green: #0f0,
  blue:  #00f,
  grey:  #CCC
);

$font-sizes: (
  small: 12px,
  medium: 16px, 
  large: 24px, 
  x-large: 32px, 
  xx-large: 48px
);

@mixin modifiers($map, $attribute, $prefix: '.', $separator: '-', $base: 'base') {
  @each $key, $value in $map {
    &#{if($key != $base, #{$prefix}#{$key}, '')} {
      @if type-of($value) == 'map' {
        @include modifiers($value, $attribute, $separator);
      }
      @else {
        #{$attribute}: $value;
      }
    }
  }
}

@include modifiers ($font-sizes,'font-size');

@each $space in $spaceamounts {
  @each $side in $sides {
 
    @if $side == 'all' {
      .m#{nth($space, 1)} {
        margin:  #{nth($space, 2)}px; 
      }

      .p#{nth($space, 1)} {
        padding: #{nth($space, 2)}px;
      }
    } @else {
      .m#{str-slice($side, 0, 1)}-#{nth($space, 1)} {
        margin-#{$side}: #{nth($space, 2)}px;
      }

      .p#{str-slice($side, 0, 1)}-#{nth($space, 1)} {
        padding-#{$side}: #{nth($space, 2)}px;
      }
    }
  }
}

@each $value in $color-list {
  .#{nth($value, 1)} {
    color: nth($value, 2);
  }

  .bg-#{nth($value, 1)} {
    background-color: nth($value, 2);
  }

  .border-#{nth($value, 1)} {
    border-color: nth($value, 2);
  }
}